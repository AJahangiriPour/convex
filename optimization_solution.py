# -*- coding: utf-8 -*-
"""Practical_10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xtvq0zEGXOzVUvUj8MTM-IpXoHfOQXnK
"""

import numpy as np
import cvxpy as cp

c = np.array([2, 5, 5, 2, 7, 9, 2, 4, 3])

A_array = np.array([
    [1, 1, 0, 0, 0, 0, 0, 0, 0],
    [-1, 0, 1, 1,1 , 1, 0, 0, 0],
    [0, 0, -1, 0, 0, 0, 1, 0, 0],
    [0, -1, 0, -1, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, -1, 0, 0, -1, 1],
    [0, 0, 0, 0, 0, -1, -1, 0, -1]
])

b_array = np.array([10, 1, -2, -3, 4, -10])

# declare the variables
x = cp.Variable(len(c))

c = cp.Constant(c)
A = cp.Constant(A_array)
b = cp.Constant(b_array)

# Define the objective function
objective = cp.Minimize(c @ x)

# Define the constraints
constraints = [A @ x == b, 0 <= x, x <= 6]

# Formulate the problem
problem = cp.Problem(objective, constraints)

# Solve the problem
result = problem.solve()
print(result)
print(x.value)

x=np.round(np.array(x.value)).astype(int)
print(x)

assert  (A_array @ x == b_array).all() and (x <= 6).all() and (0 <= x).all()